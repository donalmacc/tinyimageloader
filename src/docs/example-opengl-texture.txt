/*!
\page example1 Example: Loading an OpenGL texture
	
	This example will show you how to load an image using TinyImageLoader
	and use it as a texture.

\section intro Introduction
	
	When you drag an image onto the exe created by this example, TinyImageLoader
	will try to load it. If the file cannot be loaded (for whatever the reason),
	you can check the til.log located at in /examples/bin/til.log. If you find
	an image that doesn't load, please send it and the log to me! I will get
	back to you as soon as possible with (hopefully) a fix and (always) an
	apology.
	
\section input Key binding
	
	Use the following keys in this example:
	- Q: Go to the next frame (if it exists)
	- W: Go to the previous frame (if it exists)
	- O: Zoom out on the image
	- P: Zoom in on the image

\section setup Setup
	
	There are a couple of things you need to do before you can start using
	TinyImageLoader. First, you need to compile the TinyImageLoader static
	library using Visual Studio. Then you can copy the SDK folder to a project.
	Here's how I set up my projects:
	- \\ (project root)
	 - bin (output directory)
	  - Project.exe (Release build)
	  - Project_d.exe (Debug build)
	 - int (intermediate directory)
	  - Debug
	  - Release
	 - lib (third-party libraries)
	  - TinyImageLoader
	   - TinyImageLoader.lib
	   - TinyImageLoader_d.lib
	   - headers
	 - src (project source files)
	 - Project.vcproj
	 - Solution.sln

	You are free to set these things as you like, of course, but this is how I
	prefer it. :)

\section startup Setting up TinyImageLoader

	The first thing we need to do is initialize TinyImageLoader.
	\code
	til::TIL_Init();
	\endcode
	
\section logging Logging

	By default, TinyImageLoader posts its errors and warning to an internal
	expanding string. This may not be desirable, as it takes memory you don't
	have any control over. Therefor, TinyImageLoader comes with a series of
	callbacks you can use to control the logging behavior.
	
	In this example we will output all debug and error messages to a log.

	We open our log by using a TinyImageLoader function to attach the working
	directory.
	\code
	g_LogPath = new char[TIL_MAX_PATH];
	til::TIL_AddWorkingDirectory(g_LogPath, TIL_MAX_PATH, "til.log");
	fopen_s(&g_Log, g_LogPath, "w+");
	fclose(g_Log);
	\endcode

	We open it only to clear it. If it doesn't exist it gets created.
	
	We have a custom logging function, that outputs the message to the log we
	just created.
	
	\code
	void LoggingFunc(til::MessageData* a_Data)
	{
		fopen_s(&g_Log, g_LogPath, "a");
		char msg[1024];
		sprintf_s(msg, 1024, "%s\n", a_Data->message);
		fputs(msg, g_Log);
		fclose(g_Log);
	}
	\endcode
	
	Of course, we will need to attach this function to TinyImageLoader using the
	callback register functions.
	
	\code
	til::TIL_SetDebugFunc(LoggingFunc);
	til::TIL_SetErrorFunc(LoggingFunc);
	\endcode

\section setupopengl Setting up OpenGL

	For this example we only want to display an image on the screen. We don't want
	any of the fancypants functionality OpenGL provides.

	\code
	glMatrixMode(GL_PROJECTION);
		glLoadIdentity();
		glOrtho(0, s_WindowWidth, s_WindowHeight, 0, -1, 1);
	glMatrixMode(GL_MODELVIEW);
		glLoadIdentity();
	glClearColor(0.f, 0.f, 0.f, 0.f);
	// Make sure the quads show up
	glDisable(GL_DEPTH_TEST);
	glDisable(GL_CULL_FACE);
	\endcode

	We disable the depth test and backface culling because I'm a busy man who can't be
	bothered to check the winding of his vertices.

\section loading Loading a file

	Now we are ready to load a file. We are going to load an image as an OpenGL texture with
	an alpha component, so we are using the OpenGL color format GL_RGBA while we are using
	the TinyImageLoader format #TIL_DEPTH_A8B8G8R8. This is because TinyImageLoader uses
	big-endianness for its color components, while OpenGL prefers little-endianness. The data
	remains the same, it's just the order that is different.

	\code
	if (a_Commands == 1)
	{
		g_Load = til::TIL_Load("media\\PNG\\avatar.png", TIL_FILE_ADDWORKINGDIR | TIL_DEPTH_A8B8G8R8);
	}
	else
	{
		g_Load = til::TIL_Load(a_CommandLine[1], TIL_FILE_ABSOLUTEPATH | TIL_DEPTH_A8B8G8R8);
	}
	\endcode

	If the file could not be loaded, TIL_Load returns NULL and posts an error message to the
	log.
	
\section uploading Uploading image data to OpenGL
	
	We now have our image data loaded and converted to the right pixel depth by
	TinyImageLoader. We are ready to upload the data to OpenGL.
	
	What you have to keep in mind is that not all formats are created equally.
	Most formats only allow you to define a single image, while others also allow
	a series of frames (GIF, PNG) and some allow multiple levels of detail (ICO,
	DDS).
	
	So the first thing we will need to do is determine how many frames our image
	contains.
	
	\code
	g_TextureTotal = g_Load->GetFrameCount();
	g_Texture = new GLuint[g_TextureTotal];
	\endcode
	
	If an image is only allowed (according to the spec) to contain 1 frame, GetFrameCount() will always
	return 1.
	
	Now we can loop over our image data.
	
	\code
	for (unsigned int i = 0; i < g_TextureTotal; i++)
	{
		glEnable(GL_TEXTURE_2D);
		glGenTextures(1, &g_Texture[i]);

		glBindTexture(GL_TEXTURE_2D, g_Texture[i]);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
		glTexImage2D(
			GL_TEXTURE_2D, 0, GL_RGBA,
			g_Load->GetWidth(i), g_Load->GetHeight(i),
			0,
			GL_RGBA, GL_UNSIGNED_BYTE, g_Load->GetPixels(i)
		);
		glBindTexture(GL_TEXTURE_2D, 0);
	}
	\endcode
	
	Success! We now have an OpenGL texture. :)
	
	\section render Rendering
	
	We now have everything we need to render an image quad on the screen.
	
	\code
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	glBindTexture(GL_TEXTURE_2D, g_Texture[g_TextureCurrent]);

	// Make sure we don't screw up our meticulously designed matrices

	glPushMatrix();

		// Push it to the correct position
		glTranslatef(g_PosX, g_PosY, 0.0f);
		// Set the image size
		glScalef(g_ScaleX, g_ScaleY, 1.0f);

		// Draw a quad
		glBegin(GL_QUADS);
			glTexCoord2f(0.f, 1.f); glVertex2f(0.0f, 1.0f);
			glTexCoord2f(1.f, 1.f); glVertex2f(1.0f, 1.0f);
			glTexCoord2f(1.f, 0.f); glVertex2f(1.0f, 0.0f);
			glTexCoord2f(0.f, 0.f); glVertex2f(0.0f, 0.0f);
		glEnd();

	glPopMatrix();

	glDisable(GL_BLEND);
	\endcode
	
	\section cleanup Cleaning up
	
	Finally, when we're done, we need to clean up the handles to TinyImageLoader.
	Keep in mind that you can keep til::Image pointers around for as long as you need them.
	Calling til::TIL_ShutDown doesn't affect the validity of the handles, but it cleans up the library.
	
	\code
	til::TIL_Release(g_Load);

	til::TIL_ShutDown();
	\endcode
	
	\section code Code
	
	Check out the source for this example in example-opengl-texture.cpp.
*/
